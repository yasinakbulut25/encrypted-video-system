"use client"

import { o as onDispose, l as listenEvent, D as DOMEvent, s as scoped } from './vidstack-c3208662.js';
import { T as TextTrack, a as TextTrackSymbol, b as canUsePictureInPicture, d as canUseVideoPresentation, e as canPlayHLSNatively } from './vidstack-3be5d39a.js';
import { H as HTMLMediaProvider } from './vidstack-ad792f55.js';
import 'react';
import 'react-dom';

class NativeHLSTextTracks {
  constructor(_video, _context) {
    this.xa = _video;
    this.R = _context;
    _video.textTracks.onaddtrack = this.Da.bind(this);
    onDispose(this.si.bind(this));
  }
  Da(event) {
    const nativeTrack = event.track;
    if (!nativeTrack || findTextTrackElement(this.xa, nativeTrack))
      return;
    const track = new TextTrack({
      id: nativeTrack.id,
      kind: nativeTrack.kind,
      label: nativeTrack.label,
      language: nativeTrack.language,
      type: "vtt"
    });
    track[TextTrackSymbol.Va] = { track: nativeTrack };
    track[TextTrackSymbol.Na] = 2;
    track[TextTrackSymbol.Ha] = true;
    let lastIndex = 0;
    const onCueChange = (event2) => {
      if (!nativeTrack.cues)
        return;
      for (let i = lastIndex; i < nativeTrack.cues.length; i++) {
        track.addCue(nativeTrack.cues[i], event2);
        lastIndex++;
      }
    };
    onCueChange(event);
    nativeTrack.oncuechange = onCueChange;
    this.R.textTracks.add(track, event);
    track.setMode(nativeTrack.mode, event);
  }
  si() {
    this.xa.textTracks.onaddtrack = null;
    for (const track of this.R.textTracks) {
      const nativeTrack = track[TextTrackSymbol.Va]?.track;
      if (nativeTrack?.oncuechange)
        nativeTrack.oncuechange = null;
    }
  }
}
function findTextTrackElement(video, track) {
  return Array.from(video.children).find((el) => el.track === track);
}

class VideoPictureInPicture {
  constructor(_video, _media) {
    this.xa = _video;
    this.Ba = _media;
    this.oa = (active, event) => {
      this.Ba.delegate.Nb("picture-in-picture-change", {
        detail: active,
        trigger: event
      });
    };
    listenEvent(this.xa, "enterpictureinpicture", this.ti.bind(this));
    listenEvent(this.xa, "leavepictureinpicture", this.ui.bind(this));
  }
  get active() {
    return document.pictureInPictureElement === this.xa;
  }
  get supported() {
    return canUsePictureInPicture(this.xa);
  }
  async enter() {
    return this.xa.requestPictureInPicture();
  }
  exit() {
    return document.exitPictureInPicture();
  }
  ti(event) {
    this.oa(true, event);
  }
  ui(event) {
    this.oa(false, event);
  }
}

class VideoPresentation {
  constructor(_video, _media) {
    this.xa = _video;
    this.Ba = _media;
    this.Ra = "inline";
    listenEvent(this.xa, "webkitpresentationmodechanged", this.$a.bind(this));
  }
  get xi() {
    return canUseVideoPresentation(this.xa);
  }
  async wi(mode) {
    if (this.Ra === mode)
      return;
    this.xa.webkitSetPresentationMode(mode);
  }
  $a() {
    const prevMode = this.Ra;
    this.Ra = this.xa.webkitPresentationMode;
    this.Ba.player?.dispatch(
      new DOMEvent("video-presentation-change", {
        detail: this.Ra,
        trigger: event
      })
    );
    ["fullscreen", "picture-in-picture"].forEach((type) => {
      if (this.Ra === type || prevMode === type) {
        this.Ba.delegate.Nb(`${type}-change`, {
          detail: this.Ra === type,
          trigger: event
        });
      }
    });
  }
}
class FullscreenPresentationAdapter {
  constructor(_presentation) {
    this.vi = _presentation;
  }
  get active() {
    return this.vi.Ra === "fullscreen";
  }
  get supported() {
    return this.vi.xi;
  }
  async enter() {
    this.vi.wi("fullscreen");
  }
  async exit() {
    this.vi.wi("inline");
  }
}
class PIPPresentationAdapter {
  constructor(_presentation) {
    this.vi = _presentation;
  }
  get active() {
    return this.vi.Ra === "picture-in-picture";
  }
  get supported() {
    return this.vi.xi;
  }
  async enter() {
    this.vi.wi("picture-in-picture");
  }
  async exit() {
    this.vi.wi("inline");
  }
}

class VideoProvider extends HTMLMediaProvider {
  constructor(video, context) {
    super(video);
    this.$$PROVIDER_TYPE = "VIDEO";
    scoped(() => {
      if (canUseVideoPresentation(video)) {
        const presentation = new VideoPresentation(video, context);
        this.fullscreen = new FullscreenPresentationAdapter(presentation);
        this.pictureInPicture = new PIPPresentationAdapter(presentation);
      } else if (canUsePictureInPicture(video)) {
        this.pictureInPicture = new VideoPictureInPicture(video, context);
      }
    }, this.scope);
  }
  get type() {
    return "video";
  }
  setup(context) {
    super.setup(context);
    if (canPlayHLSNatively(this.video)) {
      new NativeHLSTextTracks(this.video, context);
    }
    context.textRenderers.Ga(this.video);
    onDispose(() => {
      context.textRenderers.Ga(null);
    });
    if (this.type === "video")
      context.delegate.Nb("provider-setup", { detail: this });
  }
  /**
   * The native HTML `<video>` element.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement}
   */
  get video() {
    return this.Ba;
  }
}

export { VideoProvider };
