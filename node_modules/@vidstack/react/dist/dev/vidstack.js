"use client"

import { a as TextTrackSymbol, P as Primitive, M as MediaPlayerInstance, k as MediaProviderInstance, m as mediaState, n as mediaContext, T as TextTrack, o as ToggleButtonInstance, u as useMediaState, q as PosterInstance, r as MediaRemoteControl, s as findActiveCue, t as ThumbnailsLoader, v as IS_SERVER, w as sliderState, x as updateSliderPreviewPlacement } from './chunks/vidstack-e1a5f257.js';
export { a7 as ARIAKeyShortcuts, al as AudioProviderLoader, aR as AudioRadioGroup, ag as AudioTrackList, C as CaptionButton, aX as CaptionButtonInstance, U as Captions, bk as CaptionsInstance, aS as CaptionsRadioGroup, O as ChapterTitle, aQ as ChaptersRadioGroup, y as Controls, aB as ControlsGroup, aW as ControlsGroupInstance, aV as ControlsInstance, aw as DefaultAudioLayout, av as DefaultLayout, ax as DefaultVideoLayout, F as FullscreenButton, aY as FullscreenButtonInstance, a2 as FullscreenController, R as Gesture, bl as GestureInstance, an as HLSProviderLoader, a1 as List, E as LiveButton, aZ as LiveButtonInstance, X as Logger, a6 as MEDIA_KEY_SHORTCUTS, a5 as MediaControls, N as Menu, aK as MenuButton, be as MenuButtonInstance, bd as MenuInstance, aL as MenuItem, bg as MenuItemInstance, aO as MenuItems, bf as MenuItemsInstance, aM as MenuPortal, bh as MenuPortalInstance, B as MuteButton, a_ as MuteButtonInstance, D as PIPButton, a$ as PIPButtonInstance, A as PlayButton, b0 as PlayButtonInstance, aj as PlayerQueryList, aU as QualityRadioGroup, aP as Radio, K as RadioGroup, bi as RadioGroupInstance, bj as RadioInstance, a4 as ScreenOrientationController, S as SeekButton, b1 as SeekButtonInstance, G as Slider, aJ as SliderChapters, bc as SliderChaptersInstance, aE as SliderController, b5 as SliderInstance, aI as SliderPreview, bb as SliderPreviewInstance, aF as SliderThumbnail, b8 as SliderThumbnailInstance, aH as SliderValue, b9 as SliderValueInstance, aG as SliderVideo, ba as SliderVideoInstance, aT as SpeedRadioGroup, ac as TextRenderers, af as TextTrackList, W as Thumbnail, bm as ThumbnailInstance, V as Time, bn as TimeInstance, a9 as TimeRange, J as TimeSlider, b6 as TimeSliderInstance, z as Tooltip, aD as TooltipContent, b4 as TooltipContentInstance, b2 as TooltipInstance, aC as TooltipTrigger, b3 as TooltipTriggerInstance, am as VideoProviderLoader, ak as VideoQualityList, H as VolumeSlider, b7 as VolumeSliderInstance, _ as canChangeVolume, a3 as canFullscreen, $ as canOrientScreen, e as canPlayHLSNatively, a0 as canRotateScreen, b as canUsePictureInPicture, d as canUseVideoPresentation, ay as defaultLayoutContext, Z as formatSpokenTime, Y as formatTime, az as getDefaultLayoutLang, ab as getTimeRangesEnd, aa as getTimeRangesStart, ao as isAudioProvider, ah as isCueActive, aq as isHLSProvider, ar as isHTMLAudioElement, at as isHTMLMediaElement, as as isHTMLVideoElement, ad as isTrackCaptionKind, ap as isVideoProvider, aN as menuPortalContext, ai as observeActiveTextTrack, ae as parseJSONCaptionsFile, au as sliderContext, a8 as softResetMediaState, bq as useActiveTextCues, br as useActiveTextTrack, bs as useAudioOptions, bt as useCaptionOptions, bu as useChapterOptions, aA as useDefaultLayoutContext, bp as useMediaStore, bw as usePlaybackRateOptions, bo as usePlayerQuery, bv as useVideoQualityOptions } from './chunks/vidstack-e1a5f257.js';
import * as React from 'react';
import { a as isString, l as listenEvent, D as DOMEvent, j as createReactComponent, k as useStateContext, m as useReactContext, n as useSignal, q as composeRefs, r as useSignalRecord, e as effect, t as useReactScope, v as signal, s as scoped } from './chunks/vidstack-4571bf12.js';
export { z as appendTriggerEvent, y as findTriggerEvent, w as hasTriggerEvent, B as isKeyboardClick, C as isKeyboardEvent, A as isPointerEvent, x as walkTriggerEventChain } from './chunks/vidstack-4571bf12.js';
export { I as Icon } from './chunks/vidstack-dd343dcb.js';
import 'react-dom';

class LibASSTextRenderer {
  constructor(loader, config) {
    this.loader = loader;
    this.config = config;
    this.priority = 1;
    this._instance = null;
    this._track = null;
    this._typeRE = /(ssa|ass)$/;
  }
  canRender(track) {
    return !!track.src && (isString(track.type) && this._typeRE.test(track.type) || this._typeRE.test(track.src));
  }
  attach(video) {
    this.loader().then(async (mod) => {
      this._instance = new mod.default({
        ...this.config,
        video,
        subUrl: this._track?.src || ""
      });
      listenEvent(this._instance, "ready", () => {
        const canvas = this._instance?._canvas;
        if (canvas)
          canvas.style.pointerEvents = "none";
      });
      listenEvent(this._instance, "error", (event) => {
        if (this._track) {
          this._track[TextTrackSymbol._readyState] = 3;
          this._track.dispatchEvent(
            new DOMEvent("error", {
              trigger: event,
              detail: event.error
            })
          );
        }
      });
    });
  }
  changeTrack(track) {
    if (!track || track.readyState === 3) {
      this._freeTrack();
    } else if (this._track !== track) {
      this._instance?.setTrackByUrl(track.src);
      this._track = track;
    }
  }
  detach() {
    this._freeTrack();
  }
  _freeTrack() {
    this._instance?.freeTrack();
    this._track = null;
  }
}

const MediaPlayerBridge = createReactComponent(MediaPlayerInstance, {
  events: [
    "onAbort",
    "onControlsChange",
    "onDurationChange",
    "onEmptied",
    "onError",
    "onFindMediaPlayer",
    "onOrientationChange",
    "onPause",
    "onPlaysinlineChange",
    "onPosterChange",
    "onProgress",
    "onReplay",
    "onStarted",
    "onSuspend",
    "onStalled",
    "onWaiting"
  ],
  eventsRegex: /^on(Can|Auto|Source|User|Fullscreen|End|Load|Play|Provider|Picture|Hls|Media|Live|Loop|Audio|Video|Time|TextTrack|Volume|Quality?|Rate|Seek|Stream|Destroy|Vds)/
});
const MediaPlayer = React.forwardRef(
  ({ aspectRatio, children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(
      MediaPlayerBridge,
      {
        ...props,
        ref: forwardRef,
        style: {
          aspectRatio,
          ...props.style
        }
      },
      (props2) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props2 }, children)
    );
  }
);
MediaPlayer.displayName = "MediaPlayer";

const MediaProviderBridge = createReactComponent(MediaProviderInstance);
const MediaProvider = React.forwardRef(
  ({ children, mediaProps, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(MediaProviderBridge, { ...props, ref: forwardRef }, (props2, instance) => /* @__PURE__ */ React.createElement("div", { ...props2 }, /* @__PURE__ */ React.createElement(MediaOutlet, { ...mediaProps, provider: instance }), children));
  }
);
MediaProvider.displayName = "MediaProvider";
function MediaOutlet({ provider, ...props }) {
  const { controls, crossorigin, poster } = useStateContext(mediaState), { loader } = provider.$state, { $iosControls: iosControls } = useReactContext(mediaContext), $controls = useSignal(controls), $iosControls = useSignal(iosControls), $crossorigin = useSignal(crossorigin), $poster = useSignal(poster), $loader = useSignal(loader), $mediaType = $loader?.mediaType();
  return $mediaType ? React.createElement($mediaType === "audio" ? "audio" : "video", {
    ...props,
    controls: $controls || $iosControls ? "" : null,
    crossOrigin: typeof $crossorigin === "boolean" ? "" : $crossorigin,
    poster: $mediaType === "video" && ($controls || $iosControls) && $poster ? $poster : null,
    preload: "none",
    "aria-hidden": "true",
    suppressHydrationWarning: true,
    ref(el) {
      provider.load(el);
    }
  }) : null;
}
MediaOutlet.displayName = "MediaOutlet";

function createTextTrack(init) {
  const media = useReactContext(mediaContext), track = React.useMemo(() => new TextTrack(init), Object.values(init));
  React.useEffect(() => {
    media.textTracks.add(track);
    return () => void media.textTracks.remove(track);
  }, [track]);
  return track;
}

function Track({ lang, ...props }) {
  createTextTrack({ language: lang, ...props });
  return null;
}
Track.displayName = "Track";

const ToggleButtonBridge = createReactComponent(ToggleButtonInstance);
const ToggleButton = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(ToggleButtonBridge, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
  }
);
ToggleButton.displayName = "ToggleButton";

const Root = React.forwardRef(({ children, ...props }, forwardRef) => {
  return /* @__PURE__ */ React.createElement(
    Primitive.div,
    {
      translate: "yes",
      "aria-live": "off",
      "aria-atomic": "true",
      ...props,
      ref: forwardRef
    },
    children
  );
});
Root.displayName = "Caption";
const Text = React.forwardRef((props, forwardRef) => {
  const textTrack = useMediaState("textTrack"), [activeCue, setActiveCue] = React.useState();
  React.useEffect(() => {
    if (!textTrack)
      return;
    function onCueChange() {
      setActiveCue(textTrack?.activeCues[0]);
    }
    textTrack.addEventListener("cue-change", onCueChange);
    return () => {
      textTrack.removeEventListener("cue-change", onCueChange);
      setActiveCue(void 0);
    };
  }, [textTrack]);
  return /* @__PURE__ */ React.createElement(
    Primitive.span,
    {
      ...props,
      "data-part": "cue",
      dangerouslySetInnerHTML: {
        __html: activeCue?.text || ""
      },
      ref: forwardRef
    }
  );
});
Text.displayName = "CaptionText";

var caption = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Root: Root,
  Text: Text
});

const PosterBridge = createReactComponent(PosterInstance);
const Poster = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(PosterBridge, { ...props }, (props2, instance) => /* @__PURE__ */ React.createElement(PosterImg, { ...props2, instance, ref: composeRefs(props2.ref, forwardRef) }, children));
  }
);
Poster.displayName = "Poster";
const PosterImg = React.forwardRef(
  ({ instance, children, ...props }, forwardRef) => {
    const { crossorigin } = useStateContext(mediaState), { src, alt, img } = instance.$state, $crossorigin = useSignal(crossorigin), $src = useSignal(src), $alt = useSignal(alt);
    return /* @__PURE__ */ React.createElement(
      Primitive.img,
      {
        ...props,
        src: $src || void 0,
        alt: $alt || void 0,
        crossOrigin: $crossorigin,
        ref: composeRefs(img.set, forwardRef)
      },
      children
    );
  }
);
PosterImg.displayName = "PosterImg";

function useState(ctor, prop, ref) {
  const initialValue = React.useMemo(() => ctor.state.record[prop], [ctor, prop]);
  return useSignal(ref.current ? ref.current.$state[prop] : initialValue);
}
const storesCache = /* @__PURE__ */ new Map();
function useStore(ctor, ref) {
  const initialStore = React.useMemo(() => {
    let store = storesCache.get(ctor);
    if (!store) {
      store = new Proxy(ctor.state.record, {
        get: (_, prop) => () => ctor.state.record[prop]
      });
      storesCache.set(ctor, store);
    }
    return store;
  }, [ctor]);
  return useSignalRecord(ref.current ? ref.current.$state : initialStore);
}

function useMediaPlayer() {
  const context = useReactContext(mediaContext);
  if (!context) {
    throw Error(
      "[vidstack] no media context was found - was this called outside of `<MediaPlayer>`?"
    );
  }
  return context?.player || null;
}

function useMediaProvider() {
  const [provider, setProvider] = React.useState(null), context = useReactContext(mediaContext);
  if (!context) {
    throw Error(
      "[vidstack] no media context was found - was this called outside of `<MediaPlayer>`?"
    );
  }
  React.useEffect(() => {
    if (!context)
      return;
    return effect(() => {
      setProvider(context.$provider());
    });
  }, []);
  return provider;
}

function useMediaRemote(target) {
  const media = useReactContext(mediaContext), remote = React.useRef();
  if (!remote.current) {
    remote.current = new MediaRemoteControl();
  }
  React.useEffect(() => {
    const ref = target && "current" in target ? target.current : target, isPlayerRef = ref instanceof MediaPlayerInstance, player = isPlayerRef ? ref : media?.player;
    remote.current.setPlayer(player ?? null);
    remote.current.setTarget(ref ?? null);
  }, [media, target && "current" in target ? target.current : target]);
  return remote.current;
}

function useThumbnails(src) {
  const scope = useReactScope(), $src = React.useMemo(() => signal(src), []), loader = React.useMemo(() => scoped(() => ThumbnailsLoader.create($src), scope), []), $cues = useSignal(loader.$cues), data = React.useMemo(() => {
    const items = [], baseURL = /^https?:/.test(src) || IS_SERVER ? src : location.href;
    for (const cue of $cues) {
      const [url, dataText = ""] = (cue.text || "").split("#"), data2 = resolveThumbnailData(dataText);
      items.push({
        url: resolveThumbnailSrc(url, baseURL),
        cue,
        x: data2.x ?? -1,
        y: data2.y ?? -1,
        width: data2.width ?? -1,
        height: data2.height ?? -1
      });
    }
    return items;
  }, [$cues]);
  if (!scope) {
    console.warn(
      `[vidstack] \`useThumbnails\` must be called inside a child component of \`<MediaPlayer>\``
    );
  }
  React.useEffect(() => {
    $src.set(src);
  }, [src]);
  return data;
}
function useActiveThumbnail(thumbnails, time) {
  const cues = React.useMemo(() => thumbnails.map((t) => t.cue), [thumbnails]);
  return React.useMemo(() => {
    const cue = findActiveCue(cues, time);
    return thumbnails.find((t) => t.cue === cue) || null;
  }, [thumbnails, cues, time]);
}
function resolveThumbnailSrc(src, baseURL) {
  return /^https?:/.test(src) ? src : new URL(src, baseURL).href;
}
const propNames = {
  x: "x",
  y: "y",
  w: "width",
  h: "height"
};
function resolveThumbnailData(data) {
  const [props, values] = data.split("="), resolvedData = {}, dataValues = values?.split(",");
  if (!props || !values)
    return {};
  for (let i = 0; i < props.length; i++) {
    resolvedData[propNames[props[i]]] = +dataValues[i];
  }
  return resolvedData;
}

function useSliderState(prop, ref) {
  const $state = useStateContext(sliderState);
  if (!$state && !ref) {
    console.warn(
      `[vidstack] \`useSliderState\` requires \`RefObject<SliderInstance>\` argument if called outside of a slider component`
    );
  }
  return useSignal((ref?.current?.$state || $state)[prop]);
}
function useSliderStore(ref) {
  const $state = useStateContext(sliderState);
  if (!$state && !ref) {
    console.warn(
      `[vidstack] \`useSliderStore\` requires \`RefObject<SliderInstance>\` argument if called outside of a slider component`
    );
  }
  return useSignalRecord(ref?.current?.$state || $state);
}

function useSliderPreview({
  clamp = false,
  offset = 0,
  orientation = "horizontal"
} = {}) {
  const [rootRef, setRootRef] = React.useState(null), [previewRef, setPreviewRef] = React.useState(null), [pointerValue, setPointerValue] = React.useState(0), [isVisible, setIsVisible] = React.useState(false);
  React.useEffect(() => {
    if (!rootRef)
      return;
    const dragging = signal(false);
    function updatePointerValue(event) {
      if (!rootRef)
        return;
      setPointerValue(getPointerValue(rootRef, event, orientation));
    }
    return effect(() => {
      if (!dragging()) {
        listenEvent(rootRef, "pointerenter", () => {
          setIsVisible(true);
          previewRef?.setAttribute("data-visible", "");
        });
        listenEvent(rootRef, "pointerdown", (event) => {
          dragging.set(true);
          updatePointerValue(event);
        });
        listenEvent(rootRef, "pointerleave", () => {
          setIsVisible(false);
          previewRef?.removeAttribute("data-visible");
        });
        listenEvent(rootRef, "pointermove", (event) => {
          updatePointerValue(event);
        });
        return;
      }
      previewRef?.setAttribute("data-dragging", "");
      listenEvent(document, "pointerup", (event) => {
        dragging.set(false);
        previewRef?.removeAttribute("data-dragging");
        updatePointerValue(event);
      });
      listenEvent(document, "pointermove", (event) => {
        updatePointerValue(event);
      });
      listenEvent(document, "touchmove", (e) => e.preventDefault(), {
        passive: false
      });
    });
  }, [rootRef]);
  React.useEffect(() => {
    if (previewRef) {
      previewRef.style.setProperty("--slider-pointer", pointerValue + "%");
    }
  }, [previewRef, pointerValue]);
  React.useEffect(() => {
    if (!previewRef)
      return;
    const update = () => {
      updateSliderPreviewPlacement(previewRef, {
        offset,
        clamp,
        orientation
      });
    };
    update();
    const resize = new ResizeObserver(update);
    resize.observe(previewRef);
    return () => resize.disconnect();
  }, [previewRef, clamp, offset, orientation]);
  return {
    previewRootRef: setRootRef,
    previewRef: setPreviewRef,
    previewValue: pointerValue,
    isPreviewVisible: isVisible
  };
}
function getPointerValue(root, event, orientation) {
  let thumbPositionRate, rect = root.getBoundingClientRect();
  if (orientation === "vertical") {
    const { bottom: trackBottom, height: trackHeight } = rect;
    thumbPositionRate = (trackBottom - event.clientY) / trackHeight;
  } else {
    const { left: trackLeft, width: trackWidth } = rect;
    thumbPositionRate = (event.clientX - trackLeft) / trackWidth;
  }
  return round(Math.max(0, Math.min(100, 100 * thumbPositionRate)));
}
function round(num) {
  return Number(num.toFixed(3));
}

export { caption as Caption, LibASSTextRenderer, MediaPlayer, MediaPlayerInstance, MediaProvider, MediaProviderInstance, MediaRemoteControl, Poster, PosterInstance, TextTrack, ThumbnailsLoader, ToggleButton, ToggleButtonInstance, Track, createTextTrack, findActiveCue, mediaContext, mediaState, sliderState, updateSliderPreviewPlacement, useActiveThumbnail, useMediaPlayer, useMediaProvider, useMediaRemote, useMediaState, useSliderPreview, useSliderState, useSliderStore, useState, useStore, useThumbnails };
